<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xin.cymall.dao.AppBaseInfoDao">

	<!-- 可根据自己的需求，是否要使用 -->
	<resultMap type="xin.cymall.entity.AppBaseInfo" id="appBaseInfoMap">
		<result property="id" column="id"/>
		<result property="appName" column="app_name"/>
		<result property="appEnname" column="app_enname"/>
		<result property="appIcon" column="app_icon"/>
		<result property="appIntr" column="app_intr"/>
		<result property="appStatus" column="app_status"/>
		<result property="remark" column="remark"/>
		<result property="opraUser" column="opra_user"/>
		<result property="createTime" column="create_time"/>
		<result property="updateTime" column="update_time"/>
		<result property="isDelete" column="is_delete"/>
	</resultMap>
	
	<!-- 搜索数据区域 -->
    <sql id="where_clause">
        <where>
            1=1
            and t.is_delete = '0'
            <if test="id != null"> and t.id = #{id} </if>
            <if test="appStatus != null and appStatus.trim() != ''"> and t.app_status = #{appStatus} </if>
			<if test="appName != null and appName.trim() != ''"> and t.app_name like concat(concat('%',#{appName}),'%') </if>
			<if test="sysUser != null"> and t.id in (select sapp.app_id from sys_user_app sapp where sapp.user_id = #{sysUser}) </if>
        </where>
    </sql>
	<sql id="leftJoinCl">
		left join SYS_USER_APP sapp on sapp.app_id = t.id
	</sql>
	
	<select id="queryObject" resultMap="appBaseInfoMap">
		select t.* from app_baseinfo t where t.id = #{value} and t.is_delete = '0'
	</select>
	
	
	<select id="queryList" resultMap="appBaseInfoMap">
		select tt.* from (
		select ts.*,rownum as rn from (
			select 
			t.id,
			t.app_name,
			t.app_enname,
			t.app_icon, 
			t.app_intr, 
			t.app_status, 
			t.remark,
			t.opra_user,
			t.is_delete,
			to_char(t.create_time,'yyyy-MM-dd HH24:mi:ss') as create_time,
			to_char(t.update_time,'yyyy-MM-dd HH24:mi:ss') as update_time
			from app_baseinfo t
			<include refid="where_clause" />
	        <choose>
	            <when test="sidx != null and sidx.trim() != ''">
	                order by ${sidx} ${order}
	            </when>
				<otherwise>
	                order by id desc
				</otherwise>
	        </choose>
        ) ts ) tt
        <where>
			<if test="offset != null and limit != null">
				and tt.rn between #{offset} and #{offend}
			</if>
        </where>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from app_baseinfo t <include refid="where_clause" />
	</select>
	
	<select id="findByVerify" resultMap="appBaseInfoMap">
		select t.* from app_baseinfo t
		<where>
			t.is_delete = '0'
			<if test="id != null">and t.id &lt;&gt; #{id}</if>
			<if test="appName != null and appName.trim() != ''">and t.app_name = #{appName}</if>
		</where>
	</select>
	
	<insert id="save" parameterType="xin.cymall.entity.AppBaseInfo" keyProperty="id">
		<selectKey resultType="Integer" order="BEFORE" keyProperty="id">  
            SELECT seq_app_baseinfo.NEXTVAL as id from DUAL
        </selectKey>
		insert into app_baseinfo
		(
			id,
			app_name,
			app_enname,
			app_icon, 
			app_intr, 
			app_status, 
			remark,
			opra_user,
			create_time,
			update_time,
			is_delete
		)
		values
		(	
			#{id},
			#{appName},
			#{appEnname},
			#{appIcon}, 
			#{appIntr}, 
			#{appStatus}, 
			#{remark},
			#{opraUser},
			to_date(to_char(SYSDATE,'yyyy-MM-dd HH24:mi:ss'),'yyyy-MM-dd HH24:mi:ss'),
			to_date(to_char(SYSDATE,'yyyy-MM-dd HH24:mi:ss'),'yyyy-MM-dd HH24:mi:ss'),
			'0'
		)
	</insert>
	
	<update id="update" parameterType="xin.cymall.entity.AppBaseInfo">
		update app_baseinfo set 
		app_name = #{appName},
		APP_ENNAME = #{appEnname},
		app_icon = #{appIcon}, 
		app_intr = #{appIntr}, 
		app_status = #{appStatus}, 
		remark = #{remark},
		opra_user = #{opraUser},
		update_time = to_date(to_char(SYSDATE,'yyyy-MM-dd HH24:mi:ss'),'yyyy-MM-dd HH24:mi:ss')
		where id = #{id}
	</update>
	
	<update id="updateStatusBatch">
		update app_baseinfo set app_status = #{value} where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</update>
	
	<delete id="delete">
		update app_baseinfo set is_delete = '1' where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		update app_baseinfo set is_delete = '1' where id in
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
</mapper>